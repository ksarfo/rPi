/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jssc_test;

/**
 *
 * @author kobi0_000
 */
import java.util.logging.Level;
import java.util.logging.Logger;
import jssc.*; import jssc.SerialPort;

public class jssc_gui extends javax.swing.JFrame {
     protected SerialPort serialPort;
    private String portName;

    public jssc_gui() {
        this.serialPort = new SerialPort(portName);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sPort = new javax.swing.JComboBox<>();
        connectionButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();
        serialIn = new javax.swing.JTextField();
        serialOut = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sPort.setModel(new javax.swing.DefaultComboBoxModel(SerialPortList.getPortNames()));
        sPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sPortActionPerformed(evt);
            }
        });

        connectionButton.setText("Connect");
        connectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionButtonActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sPort, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(connectionButton)
                        .addGap(0, 188, Short.MAX_VALUE))
                    .addComponent(serialIn)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(serialOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serialIn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendButton)
                    .addComponent(serialOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sPortActionPerformed
        // TODO add your handling code here:
         portName = (String)sPort.getSelectedItem();
    }//GEN-LAST:event_sPortActionPerformed

    private void connectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionButtonActionPerformed
        // TODO add your handling code here:
        SerialPort serialPort = new SerialPort(portName);
       //  portName = (String)sPort.getSelectedItem();
         if (connectionButton.getText().equals("Disconnect")) {
             try {
                
      serialPort.purgePort(WIDTH);
        System.out.println("Port opened: " + serialPort.closePort());
 
             }
    catch (SerialPortException ex) {
        System.out.println(ex);
    }
               connectionButton.setText("Connect");      
            sPort.setEnabled(true);
        
        } else {
           
         
    try {
        
         serialPort.openPort();
       
         serialPort.setParams(SerialPort.BAUDRATE_9600, 
                             SerialPort.DATABITS_8,
                             SerialPort.STOPBITS_1,
                             SerialPort.PARITY_NONE);
           serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN | 
                                  SerialPort.FLOWCONTROL_RTSCTS_OUT);
            System.out.println("Port opened: " + serialPort.isOpened());
            

   

       
        //System.out.println("\"Hello World!!!\" successfully writen to port: " +   serialPort.writeBytes("Hello World!!!".getBytes()));
     
        connectionButton.setText("Disconnect");
       sPort.setEnabled(false);
    }
    catch (SerialPortException ex){
        System.out.println(ex);
    }
         }
   
    }//GEN-LAST:event_connectionButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        
        if(serialPort.isOpened())
        {
            
          System.out.println("Port opened: " + serialPort.isOpened());
         try {   
            String buffer = serialOut.getText();
            serialPort.writeBytes(buffer.getBytes());            
        }  catch (SerialPortException ex) {
           System.out.println(ex);
        }
        }
        else
        {
          
             System.out.println("Port not opened");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jssc_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jssc_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jssc_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jssc_gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jssc_gui().setVisible(true);
       
            }
        });
    }
   public void go() throws InterruptedException
   {
           SerialPort serialPort = new SerialPort(portName);
       //  portName = (String)sPort.getSelectedItem();
         if (connectionButton.getText().equals("Disconnect")) {
             try {
                
      serialPort.purgePort(WIDTH);
        System.out.println("Port opened: " + serialPort.closePort());
 
             }
    catch (SerialPortException ex) {
        System.out.println(ex);
    }
               connectionButton.setText("Connect");      
            sPort.setEnabled(true);
        
        } else {
           
         
    try {
        
         serialPort.openPort();
       
         serialPort.setParams(SerialPort.BAUDRATE_9600, 
                             SerialPort.DATABITS_8,
                             SerialPort.STOPBITS_1,
                             SerialPort.PARITY_NONE);
           serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN | 
                                  SerialPort.FLOWCONTROL_RTSCTS_OUT);
           serialPort.wait();
            System.out.println("Port opened: " + serialPort.isOpened());
            

   

       
        //System.out.println("\"Hello World!!!\" successfully writen to port: " +   serialPort.writeBytes("Hello World!!!".getBytes()));
     
        connectionButton.setText("Disconnect");
       sPort.setEnabled(false);
    }
    catch (SerialPortException ex){
        System.out.println(ex);
    }
         }
   
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectionButton;
    private javax.swing.JComboBox<String> sPort;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField serialIn;
    private javax.swing.JTextField serialOut;
    // End of variables declaration//GEN-END:variables
}
